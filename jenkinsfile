#!/usr/bin/env groovy   //Para que los IDE's coloreen adecuadamente

//Para crear tareas con el entorno gráfico y generar con la sintáxis de pipeline. Hay algunos plugins que no tienen implementada esta ayuda
//<URL Jenkins>/pipeline-syntax/


// Sintáxis declarativa
/*pipeline { //Obligatorio
    agent any //Los quevan a realizar la tarea. any: Cualquiera disponible
    //tools {
    //    maven 'Maven Test' //Indica las cosas necesarias. Están en Admnistración Global Tool
    //}
    stages { //Son las distintas cosas que se van a ir haciendo. Equivalente a los build stages
        stage ('Build') {
            steps {
                echo 'Building...'
                //sh 'mvn --version'
            }
        }
        stage ('Test') {
            steps {  
                echo 'Testing...'
            }
        }
        stage ('Deploy') {
            steps {  
                echo 'Deploying...'
            }
        }
    }
}*/


/*// Get the input
def inputConfig
def userInput = input(
        id: 'userInput', message: 'Enter path of test reports:?',
        parameters: [
                string(defaultValue: 'None',
                        description: 'Path of config file',
                        name: 'Config')
         ])
inputConfig = userInput.Config?:''*/

//Sintáxis de scripting. Es la más moderna. Se indica para cada nodo (agente) que es lo que hay que hacer
node {
    checkout scm //Para hacer el checkout del contenido del proyecto
    stage ('Build') {
        sh 'echo ${inputConfig}'
        withMaven( //Esto lo tengo porque estoy usando el Pipeline Maven Integration
            maven:'Maven Test' //Permite especificar la versión del maven a utilizar
        ){
            sh 'mvn compile'
        }
    }
    stage ('Test') {
        withMaven( //Esto lo tengo porque estoy usando el Pipeline Maven Integration
            maven:'Maven Test' //Permite especificar la versión del maven a utilizar
        ){
            sh 'mvn test' //El withmaven de arriba publica automaticamente en el jenkins los xml de los tests
        }
    }
    stage ('Deploy') {
        try{
               withMaven( //Esto lo tengo porque estoy usando el Pipeline Maven Integration
                    maven:'Maven Test' //Permite especificar la versión del maven a utilizar
                ){
                    sh 'mvn package' 
                   git add target
                   git commit-am 'ok'
                }
                sh 'cp ${WORKSPACE}/target/*.jar /home/ivan/carpeta/lib'
        }
        finally{
            deleteDir()
        }

    }

}



//Para indicar que algo se ejecute en un nodo concreto:
//  Forma nueva: node ('<nombre nodo>')
//  Forma antigua: agent {lable '<nombre nodo')
//  Por interfaz: En la Configuración de la tarea usar la opción" Restringir dónde se puede ejecutar este proyecto."

/*
//Plantilla para encadenar tareas
node {
    try {
        stage('Test') {
            sh 'echo "Fail!"; exit 1'
        }
        echo 'This will run only if successful'
    } catch (e) {
        echo 'This will run only if failed'

        // Since we're catching the exception in order to report on it,
        // we need to re-throw it, to ensure that the build is marked as failed
        throw e
    } finally {
        //The currentBuild variable may be used to refer to the currently running build. It has the following readable properties:
        //result
            //typically SUCCESS, UNSTABLE, or FAILURE (may be null for an ongoing build)
        def currentResult = currentBuild.result ?: 'SUCCESS' //Operador elvis es para no tener que repetir Ej en displayName = user.name ? user.name : 'Anonymous' puedo quitar el user.name segundo
        if (currentResult == 'UNSTABLE') {
            echo 'This will run only if the run was marked as unstable'
        }

        def previousResult = currentBuild.previousBuild?.result
        if (previousResult != null && previousResult != currentResult) {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }

        echo 'This will always run'
    }
}*/

/*
//Versión igual que lo anterior pero en la sintáxis antigua
pipeline {
    agent any
    stages {
        stage('Test') {
            steps {
                sh 'echo "Fail!"; exit 1'
            }
        }
    }
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable { //Quiere decir que han fallado mayoritariamente entre las 5 últimas (inestable)
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}*/
