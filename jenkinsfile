#!/usr/bin/env groovy   //Para que los IDE's coloreen adecuadamente


// Sintáxis declarativa
/*pipeline { //Obligatorio
    agent any //Los quevan a realizar la tarea. any: Cualquiera disponible
    //tools {
    //    maven 'Maven Test' //Indica las cosas necesarias. Están en Admnistración Global Tool
    //}
    stages { //Son las distintas cosas que se van a ir haciendo. Equivalente a los build stages
        stage ('Build') {
            steps {
                echo 'Building...'
                //sh 'mvn --version'
            }
        }
        stage ('Test') {
            steps {  
                echo 'Testing...'
            }
        }
        stage ('Deploy') {
            steps {  
                echo 'Deploying...'
            }
        }
    }
}*/

/*
// Get the input
def inputConfig
def userInput = input(
        id: 'userInput', message: 'Enter path of test reports:?',
        parameters: [
                string(defaultValue: 'None',
                        description: 'Path of config file',
                        name: 'Config')
         ])
inputConfig = userInput.Config?:''

//Sintáxis de scripting. Es la más moderna. Se indica para cada nodo (agente) que es lo que hay que hacer
node {
    checkout scm //Para hacer el checkout del contenido del proyecto
    stage ('Build') {
        sh 'echo ${inputConfig}'
        withMaven( //Esto lo tengo porque estoy usando el Pipeline Maven Integration
            maven:'Maven Test' //Permite especificar la versión del maven a utilizar
        ){
            sh 'mvn compile'
        }
    }
    stage ('Test') {
        withMaven( //Esto lo tengo porque estoy usando el Pipeline Maven Integration
            maven:'Maven Test' //Permite especificar la versión del maven a utilizar
        ){
            sh 'mvn test' //El withmaven de arriba publica automaticamente en el jenkins los xml de los tests
        }
    }
    stage ('Deploy') {
        try{
               withMaven( //Esto lo tengo porque estoy usando el Pipeline Maven Integration
                    maven:'Maven Test' //Permite especificar la versión del maven a utilizar
                ){
                    sh 'mvn package' 
                }
                sh 'cp ${WORKSPACE}/target/*.jar /home/ivan/carpeta/lib'
        }
        finally{
            deleteDir()
        }

    }

}
*/


//Plantilla para encadenar tareas
node {
    try {
        stage('Test') {
            sh 'echo "Fallo!"; exit 0' //El exit 1 indica fallo. En windows en lugar de sh sería bat
        }
        echo 'Se ejecuta si exito'
    } catch (e) {
        echo 'Se ejecuta si fallo'
        throw e
    } finally {
        def currentResult = currentBuild.result ?: 'SUCCESS'
        if (currentResult == 'UNSTABLE') {
            echo 'Se ejecuta si unstable'
        }

        def previousResult = currentBuild.previousBuild?.result
        if (previousResult != null && previousResult != currentResult) {
            echo 'Se ejecuta si hay cambio de estado'
        }

        echo 'Se ejecuta siempre'
    }
}
